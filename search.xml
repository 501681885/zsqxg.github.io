<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown的用法</title>
    <url>/post/290ee3ee.html</url>
    <content><![CDATA[<h1 id="markdown的用法"><a href="#markdown的用法" class="headerlink" title="markdown的用法"></a>markdown的用法</h1> <a id="more"></a>

<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><hr>
<p>无序列表</p>
<ul>
<li>条目 1</li>
<li>条目 2<ul>
<li>条目 2a</li>
<li>条目 2b</li>
</ul>
</li>
</ul>
<p>有序列表</p>
<ol>
<li>条目 1</li>
<li>条目 2</li>
<li>条目 3<ul>
<li>条目 3a</li>
<li>条目 3b</li>
</ul>
</li>
</ol>
<p>引用<br>就像邵林说的：</p>
<blockquote>
<p>我们活在未来 <br><br>现在只是我们的过去</p>
</blockquote>
<p>内敛代码:<br>我想你可以在这里<br>使用 <code>&lt;addr&gt;</code> 元素</p>
<p><a href="https://www.baidu.com/">引用百度链接</a></p>
<p>引用图片<br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1602609615100&di=27a6d612d493ef76308fffdbb2475f9f&imgtype=0&src=http://a0.att.hudong.com/18/56/14300000958002128488569856508.jpg" alt="引用图片"></p>
<hr>
<p><em>字体斜线</em></p>
<p><strong>字体加粗</strong></p>
<blockquote>
<p>字前面加灰色</p>
</blockquote>
<br>
表格<br>
表格是我觉得 Markdown 比较累人的地方，例子如下：

<table>
<thead>
<tr>
<th>Tables</th>
<th align="center">Are</th>
<th align="right">Cool</th>
</tr>
</thead>
<tbody><tr>
<td>col 3 is</td>
<td align="center">right-aligned</td>
<td align="right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
</tbody></table>
<p><br>任务列表</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 这是已完成的项目</li>
<li><input disabled="" type="checkbox"> 这是未完成的项目</li>
</ul>
]]></content>
      <categories>
        <category>知识</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring说明</title>
    <url>/post/c399f49a.html</url>
    <content><![CDATA[<h1 id="Spring-配置说明"><a href="#Spring-配置说明" class="headerlink" title="Spring 配置说明"></a>Spring 配置说明</h1> <a id="more"></a>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><pre><code>&lt;alias name=&quot;user&quot; alias=&quot;abc&quot;/&gt;</code></pre>
<p> 2.Bean得配置<br>       id：bean的唯一标识，也就是相当于我们学的对象名<br>       class：bean对象对应得全限定名：包名+类型<br>       name：也是别名，而且name可以同时去多个</p>
<pre><code>   &lt;bean id=&quot;userT&quot; class=&quot;com.test.pojo.UserT&quot; name=&quot;userT,userT2 userT3;userT4&quot;&gt;
             &lt;property name=&quot;name&quot; value=&quot;name别名创建&quot;/&gt;
         &lt;/bean&gt;</code></pre>
<p> 3.import<br>   这个import，一般用于团队开发使用，它可以将多个配置文件，导入合并为一个<br>     假设显目有多人开发，不同类需要注册不同beans.xml ,最后用import将beans.xml汇入成一个 a pplicationContext.xml</p>
<hr>
<!-- more -->
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>本质 set方式注入<br>     1.依赖：bean对象得创建依赖于容器<br>     2.注入： bean对象中的所有属性，由容器来注入</p>
<p>   A.构造器注入  spring-02  beans.xml</p>
<p>   B.set注入  spring-03-di   beans.xml</p>
<p>   C.拓展方式注入：p命名空间，c命名空间注入<br>       xmlns:p=”<a href="http://www.springframework.org/schema/p&quot;">http://www.springframework.org/schema/p&quot;</a><br>       xmlns:c=”<a href="http://www.springframework.org/schema/c&quot;">http://www.springframework.org/schema/c&quot;</a><br>         注意点，不能直接使用，需要导入约束</p>
<hr>
<h2 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h2><p>1.单例模式（spring默认  scope=”singleton”）<br>   仅管理一个singleton bean的一个共享实例，并且所有对具有ID或与该bean定义相匹配的ID的bean的请求都会导致该特定的bean实例由Spring容器返回。<br>   换句话说，当您定义一个bean定义并且其作用域为单例时，Spring IoC容器将为该bean定义所定义的对象创建一个实例。该单个实例存储在此类单例bean的高速缓存中，并且对该命名bean的所有后续请求和引用都返回该高速缓存的对象<br>     a.单例模式<br>     <bean id="user2" class="com.User"  c:name="c命名空间注入" c:age="18" scope="singleton"  /></p>
<pre><code> b.原型模式
 &lt;bean id=&quot;user2&quot; class=&quot;com.User&quot;  c:name=&quot;c命名空间注入&quot; c:age=&quot;18&quot; scope=&quot;prototype&quot;  /&gt;

 c.其余的request，session，application,这些个只能在web开发中使用到</code></pre>
<h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><p>1.在xml中显示得配置   2.在Java中显示配置  3.隐式得自动装配bean  4.使用注解自动装配</p>
<h3 id="3-1："><a href="#3-1：" class="headerlink" title="3-1："></a>3-1：</h3><pre><code>ByName自动装配
    byname:会自动在容器上下文中查找，和自己对象set方法后面得值对应得beanid！
    bytype:会自动在容器上下文中查找，和自己对象属性类型相同的bean！
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;cat&quot; class&#x3D;&quot;com.pojo.Cat&quot;&#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;dog&quot; class&#x3D;&quot;com.pojo.Dog&quot;&#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;people&quot; class&#x3D;&quot;com.pojo.People&quot; autowire&#x3D;&quot;byName&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;自动装配&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></code></pre>
<h3 id="3-2："><a href="#3-2：" class="headerlink" title="3-2："></a>3-2：</h3><pre><code>ByTpye自动装配
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean  class&#x3D;&quot;com.pojo.Cat&quot;&#x2F;&gt;</span><br><span class="line">&lt;bean  class&#x3D;&quot;com.pojo.Dog&quot;&#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;people&quot; class&#x3D;&quot;com.pojo.People&quot; autowire&#x3D;&quot;byType&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;byType自动装配&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></code></pre>
<h3 id="4-注解自动装配"><a href="#4-注解自动装配" class="headerlink" title="4.注解自动装配"></a>4.注解自动装配</h3><pre><code> 使用须知
  1.导入约束：context约束
  2.配置注解的支持  &lt;context:annotation-config/&gt;（重要）
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:annotation-config&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
  @Autowired  直接属性上使用，也可以在set方法上使用  可以不要写set方法，前提是自动装配的属</code></pre>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="代码步骤："><a href="#代码步骤：" class="headerlink" title="代码步骤："></a>代码步骤：</h2><h3 id="1-接口"><a href="#1-接口" class="headerlink" title="1.接口"></a>1.接口</h3>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dome01;</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F;住房</span><br><span class="line"> public interface Rent &#123;</span><br><span class="line">     public  void  rent();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-真实角色"><a href="#2-真实角色" class="headerlink" title="2.真实角色"></a>2.真实角色</h3><p>   package com.dome01;</p>
<p>   //房东<br>   public class Host implements Rent{</p>
<pre><code>public void rent() &#123;
    System.out.println(&quot;房东要出租房子&quot;);
&#125;
&#125;</code></pre>
<h3 id="3-代理角色"><a href="#3-代理角色" class="headerlink" title="3.代理角色"></a>3.代理角色</h3><pre><code>package com.dome01;
public class Poxy &#123;
   private  Host host;

  public Poxy() &#123;
 &#125;

 public Poxy(Host host) &#123;
    this.host = host;
 &#125;

 public  void rent()&#123;
    seeHouse();
    host.rent();
    hetong();
    fare();
&#125;

//看房
public  void  seeHouse()&#123;
    System.out.println(&quot;中介带你看房&quot;);
&#125;

//签合约
public  void  hetong()&#123;
    System.out.println(&quot;签合同&quot;);
&#125;

//收中介费
public  void  fare()&#123;
    System.out.println(&quot;中介收费&quot;);
&#125;

&#125;</code></pre>
<h3 id="4-客户端访问代理角色"><a href="#4-客户端访问代理角色" class="headerlink" title="4.客户端访问代理角色"></a>4.客户端访问代理角色</h3><pre><code> package com.dome01;
  public class Client &#123;
   public static void main(String[] args) &#123;
    //房东要出租房子
    Host host=new Host();
    //代理，中介帮房东出租房子，代理角色有一些附加操作
    Poxy poxy=new Poxy(host);
    //你可以不找房东，直接找中介签约
    poxy.rent();
       &#125;
   &#125;</code></pre>
<h2 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h2><p> ·可以让角色只做自己的是，公共的部分不应关注<br> ·公共的交给代理角色，实现了业务的分工！<br> ·公共业务发生了拓展时，方便管理<br>缺点：<br> ·一个真实角色产生一个代理角色，代码量翻倍，效率变低<br>动态代理</p>
<p>.动态代理和静态代理角色一样<br>。动态代理的代理类时动态生成的，不是我们直接写的<br>。动态代理分为俩类：基于接口的动态代理  ，基于类的动态代理<br> 。基于接口—JDK动态代理【我们这里使用】<br> 。基于类： cglib<br> .字节码实现：javasist</p>
<p>了解两个类：Proxy ：代理  ，InvocationHandler：调用处理程序<br>一个动态代理类代理的时一个接口，一般就是对应一类业务<br>一个动态代理类可以代理多个类，只要是实现了同一个接口！</p>
]]></content>
      <categories>
        <category>知识</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>知识</tag>
        <tag>spring5</tag>
      </tags>
  </entry>
  <entry>
    <title>螺蛳粉</title>
    <url>/post/5f262806.html</url>
    <content><![CDATA[<h1 id="螺蛳粉"><a href="#螺蛳粉" class="headerlink" title="螺蛳粉"></a>螺蛳粉</h1><a id="more"></a>
<p><img data-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1602842843700&di=a228adcb2b385ff7b65a2bf36d5de3d8&imgtype=0&src=http://pic.rmb.bdstatic.com/a749e0fda9425b98736ff8884868a778.jpeg" alt="螺蛳粉"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">广西柳州特产的“螺蛳粉”，以其鲜滑爽快的口感而闻名全国。“一大碗”螺蛳粉是广西十大名小吃，“一大碗”柳州螺蛳粉，专注汤工，专注效率，让螺蛳粉的入门经营者，得以轻松、省心地快速实现足以匹敌老牌家传名店的产品口味和顾客口碑，这是“一大碗”品牌成功的秘诀所在。“不食螺蛳粉，枉为柳州人”。柳州的螺蛳粉，位居柳州风味小吃之首，柳州盛产螺蛳，柳州人吃螺蛳已有上百年的历史了。 [1-2] </span><br><span class="line">中文名螺蛳粉主要食材米粉，卤水，汤底，酸笋分    类广西柳州，小吃米粉口    味辣、爽、鲜、风味</span><br></pre></td></tr></table></figure>
<p><img data-src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1640806974,3236671041&fm=26&gp=0.jpg" alt="螺蛳粉"></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简介编辑</span><br><span class="line">一大碗柳州螺蛳粉，在对螺蛳粉产品和工艺进行精密技术分析的基础上，对传统门店的经营方式进行了大刀阔斧的改良。经过“一大碗”改良的螺蛳粉工艺，让连锁加盟的入门经营者们在产品口味、顾客喜好和店面的管理经营成本之间建立起了最佳平衡，成为关注柳州螺蛳粉这一传统美食的经营者们最理想的创富平台。 [1] </span><br></pre></td></tr></table></figure>
<h3 id="2-螺蛳粉历史"><a href="#2-螺蛳粉历史" class="headerlink" title="2 螺蛳粉历史"></a>2 螺蛳粉历史</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">螺蛳粉历史编辑</span><br><span class="line">“不食螺蛳粉，枉为柳州人”。柳州的螺蛳粉，闻名遐迩，据说在很久以前柳州人只有单一的螺蛳吃法，除了一些配菜，几乎很少还有人在加入其它的什么东西。上世纪80年代初期的一天深夜，几位外地人赶到柳州，饥肠辘辘中找到一家快要打烊的米粉摊点，可是米粉必用的骨头汤已经没有了，只剩一锅煮螺剩下的螺蛳汤，摊主情急之下，把米粉放到螺蛳汤里煮，又加上青菜以及花生等配菜，这几个外地人吃后，大呼好吃。摊主将此记在心中，逐步完善其配料和制作，遂慢慢形成了现在螺蛳粉的雏形。 [2] </span><br><span class="line">螺蛳粉最早出现于20世纪70年代末，最晚不超过20世纪80年代初，由于相关资料的严重缺失，确切的发源地已难考证，而有着浓重“螺蛳情结”和“米粉情结”的柳州人，历史的巧妙安排之中，可能也有其必然的一面吧。 [3] </span><br></pre></td></tr></table></figure>
<h3 id="3-风味特点"><a href="#3-风味特点" class="headerlink" title="3 风味特点"></a>3 风味特点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">风味特点编辑</span><br><span class="line">1，米粉 [2] </span><br><span class="line">“一大碗”的米粉质地柔韧，富有弹性，水煮不糊汤，干炒不易断，配以酸笋、腐竹等，爽滑入味，深受广大消费者的喜爱。生产工艺：大米—淘洗—浸泡—磨浆—蒸粉—压片—复蒸—冷却—干燥—包装—成品。 [3] </span><br><span class="line">2，卤水</span><br><span class="line">好汤出好粉。粉好吃，汤难熬。螺蛳粉的一切奥秘，都在那碗汤里。“一大碗”专注卤水汤工，卤水是螺蛳粉的精髓所在，它香而不腐，闻之开胃，想之流涎，吃之打滚。 [3] </span><br><span class="line">3，汤底</span><br><span class="line">螺蛳粉的汤底主要采用猪骨头慢火熬制而成，配上质地柔韧、富有弹性、水煮不糊汤、干炒不易断的米粉，鲜香爽口，回味无穷。 [2-3] </span><br><span class="line">优势优势</span><br><span class="line">1，值得信赖。 [3] </span><br><span class="line">西茗餐饮致力于“一大碗”螺蛳粉品牌的打造，要统一VI系统的基础上，提供定制的门店设计和高品质的门店装修形象设计，是消费者值得信赖的品牌。 [1]  [3] </span><br><span class="line">2，操作简单，出品速度快。 [3] </span><br><span class="line">“一大碗”螺蛳粉是操作简单，出品速度快，品质稳定，即使是没有过餐饮行业经验的新手也能很快掌握产品制作技术。 [2] </span><br><span class="line">3，口味正宗，回味无穷。 [3] </span><br><span class="line">“一大碗”螺蛳粉由柳州特有的软滑爽口的米粉，加上酸笋、木耳、花生、油炸腐竹、黄花菜、鲜嫩青菜等配料及浓郁适度的酸辣味和煮烂螺蛳的汤水调合而成，但又因有奇特鲜美的螺蛳汤，使你欲罢不能，吃一想二。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>吃货</category>
      </categories>
      <tags>
        <tag>吃货</tag>
        <tag>螺蛳粉</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-MVC自动配置原理</title>
    <url>/post/2d382781.html</url>
    <content><![CDATA[<h1 id="MVC自动配置原理"><a href="#MVC自动配置原理" class="headerlink" title="MVC自动配置原理"></a>MVC自动配置原理</h1><p> Springboot-mvc自动配置的基本原理<br> <a id="more"></a></p>
<h2 id="官网阅读"><a href="#官网阅读" class="headerlink" title="官网阅读"></a>官网阅读</h2><p>  在进行项目编写前，我们还需要知道一个东西，就是SpringBoot对我们的SpringMVC还做了哪些配置，包括如何扩展，如何定制。只有把这些都搞清楚了，我们在之后使用才会更加得心应手。途径一：源码分析，途径二：官方文档！</p>
<pre><code>Spring MVC Auto-configuration
// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。
Spring Boot provides auto-configuration for Spring MVC that works well with most applications.
// 自动配置在Spring默认设置的基础上添加了以下功能：
The auto-configuration adds the following features on top of Spring’s defaults:
// 包含视图解析器
Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.
// 支持静态资源文件夹的路径，以及webjars
Support for serving static resources, including support for WebJars 
// 自动注册了Converter：
// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把&quot;1&quot;字符串自动转换为int类型
// Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】
Automatic registration of Converter, GenericConverter, and Formatter beans.
// HttpMessageConverters
// SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，可以去看官网文档解释；
Support for HttpMessageConverters (covered later in this document).
// 定义错误代码生成规则的
Automatic registration of MessageCodesResolver (covered later in this document).
// 首页定制
Static index.html support.
// 图标定制
Custom Favicon support (covered later in this document).
// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！
Automatic use of a ConfigurableWebBindingInitializer bean (covered later in this document).

/*
 如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己
的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。如果希望提供
 RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义
实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。
 */
If you want to keep Spring Boot MVC features and you want to add additional MVCconfiguration 
 (interceptors, formatters, view controllers, and other features), you can add your own 
 @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide 
 custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or 
ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.

// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。
If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc.</code></pre>
<hr>
<p>我们来仔细对照，看一下它怎么实现的，它告诉我们SpringBoot已经帮我们自动配置好了SpringMVC，然后自动配置了哪些东西呢？</p>
<h2 id="ContentNegotiatingViewResolver-内容协商视图解析器"><a href="#ContentNegotiatingViewResolver-内容协商视图解析器" class="headerlink" title="ContentNegotiatingViewResolver 内容协商视图解析器"></a>ContentNegotiatingViewResolver 内容协商视图解析器</h2><p>   自动配置了ViewResolver，就是我们之前学习的SpringMVC的视图解析器；<br>   即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。</p>
<pre><code>@Bean
@ConditionalOnBean(ViewResolver.class)
@ConditionalOnMissingBean(name = &quot;viewResolver&quot;, value = ContentNegotiatingViewResolver.class)
public ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) &#123;
ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();
resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));
// ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级
resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);
return resolver;
&#125;</code></pre>
<p>   我们可以点进这类看看！找到对应的解析视图的代码；</p>
<pre><code>@Nullable // 注解说明：@Nullable 即参数可为null
public View resolveViewName(String viewName, Locale locale) throws Exception &#123;
RequestAttributes attrs = RequestContextHolder.getRequestAttributes();
Assert.state(attrs instanceof ServletRequestAttributes, &quot;No current ServletRequestAttributes&quot;);
List&lt;MediaType&gt; requestedMediaTypes = this.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());
if (requestedMediaTypes != null) &#123;
    // 获取候选的视图对象
    List&lt;View&gt; candidateViews = this.getCandidateViews(viewName, locale, requestedMediaTypes);
    // 选择一个最适合的视图对象，然后把这个对象返回
    View bestView = this.getBestView(candidateViews, requestedMediaTypes, attrs);
    if (bestView != null) &#123;
        return bestView;
    &#125;
&#125;
// .....
&#125;</code></pre>
<p>我们继续点进去看，他是怎么获得候选的视图的呢？</p>
<p>getCandidateViews中看到他是把所有的视图解析器拿来，进行while循环，挨个解析！</p>
<pre><code>Iterator var5 = this.viewResolvers.iterator();</code></pre>
<p>所以得出结论：ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的 </p>
<p>我们再去研究下他的组合逻辑，看到有个属性viewResolvers，看看它是在哪里进行赋值的！</p>
<pre><code>protected void initServletContext(ServletContext servletContext) &#123;
// 这里它是从beanFactory工具中获取容器中的所有视图解析器
// ViewRescolver.class 把所有的视图解析器来组合的
Collection&lt;ViewResolver&gt; matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(this.obtainApplicationContext(), ViewResolver.class).values();
ViewResolver viewResolver;
if (this.viewResolvers == null) &#123;
    this.viewResolvers = new ArrayList(matchingBeans.size());
&#125;
// ...............

&#125;</code></pre>
<blockquote>
<p><strong>我们去实现一下</strong>  <BR></p>
</blockquote>
<ol>
<li><p>我们在我们的主程序中去写一个视图解析器来试试；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean &#x2F;&#x2F;放到bean中</span><br><span class="line">public ViewResolver myViewResolver()&#123;</span><br><span class="line">  return new MyViewResolver();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;我们写一个静态内部类，视图解析器就需要实现ViewResolver接口</span><br><span class="line">private static class MyViewResolver implements ViewResolver&#123;</span><br><span class="line">   @Override</span><br><span class="line">   public View resolveViewName(String s, Locale locale) throws Exception &#123;</span><br><span class="line">    return null;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>怎么看我们自己写的视图解析器有没有起作用呢？  <BR><br>我们给 DispatcherServlet 中的 doDispatch 方法加个断点进行调试一下,因为所有的请求都会走到这个方法中<br><br><img data-src="./Springboot-mvc%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/1.png" alt="1.png"></p>
</li>
<li><p>我们启动我们的项目，然后随便访问一个页面，看一下Debug信息;<br>找到this;<br><img data-src="./Springboot-mvc%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/2.png" alt="2.png"><br> 找到视图解析器，我们看到我们自义的就在这里了；<br> <img data-src="./Springboot-mvc%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/3.png" alt="3.png"><br> 所以说，我们如果想要使用自己定制化的东西，我们只需要给容器中添加这个组件就好了！剩下的事情SpringBoot就会帮我们做了！<br> 转换器和格式化器找到格式化转换器：</p>
<pre><code> @Bean
 @Override
 public FormattingConversionService mvcConversionService() &#123;
 // 拿到配置文件中的格式化规则
 WebConversionService conversionService = 
    new WebConversionService(this.mvcProperties.getDateFormat());
 addFormatters(conversionService);
 return conversionService;
 &#125;</code></pre>
<p> 点击去：</p>
<pre><code> public String getDateFormat() &#123;
      return this.dateFormat;
     &#125;

 /**
  * Date format to use. For instance, `dd/MM/yyyy`. 默认的
  */
 private String dateFormat;</code></pre>
<p>可以看到在我们的Properties文件中，我们可以进行自动配置它！<br>如果配置了自己的格式化方式，就会注册到Bean中生效，我们可以在配置文件中配置日期格式化的规则：</p>
<p><img data-src="./Springboot-mvc%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/4.png" alt="4.png"><br><img data-src="./Springboot-mvc%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/5.png" alt="5.png"></p>
<p> 修改SpringBoot的默认配置<br> 这么多的自动配置，原理都是一样的，通过这个WebMVC的自动配置原理分析，我们要学会一种学习方式，通过源码探究，得出结论；这个结论一定是属于自己的，而且一通百通。springBoot的底层，大量用到了这些设计细节思想，所以，没事需要多阅读源码！得出结论；SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来扩展使用SpringMVC  官方文档如下：</p>
<pre><code> If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</code></pre>
<p> 我们要做的就是编写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解；我们去自己写一个；我们新建一个包叫config，写一个类MyMvcConfig；</p>
<pre><code> //应为类型要求为WebMvcConfigurer，所以我们实现其接口
 //可以使用自定义类扩展MVC的功能
 @Configuration
 public class MyMvcConfig implements WebMvcConfigurer &#123;
 @Override
 public void addViewControllers(ViewControllerRegistry registry) &#123;
 // 浏览器发送/test ， 就会跳转到test页面；
 registry.addViewController(&quot;/test&quot;).setViewName(&quot;test&quot;);
  &#125;
 &#125;</code></pre>
<p> 我们去浏览器访问一下：</p>
<p>  <img data-src="./Springboot-mvc%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/6.png" alt="6.png"></p>
<p> 所以说，我们要扩展SpringMVC，官方就推荐我们这么去使用，既保SpringBoot留所有的自动配置，也能用我们扩展的配置！</p>
<p> 我们可以去分析一下原理：</p>
<ol>
<li><p>WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter</p>
</li>
<li><p>这个类上有一个注解，在做其他自动配置时会导入：<br> @Import(EnableWebMvcConfiguration.class)</p>
</li>
<li><p>我们点进EnableWebMvcConfiguration这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration</p>
<p> 这个父类中有这样一段代码：</p>
<pre><code>  public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport &#123;
     private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();
     // 从容器中获取所有的webmvcConfigurer
     @Autowired(required = false)
      public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) &#123;
     if (!CollectionUtils.isEmpty(configurers)) &#123;
           this.configurers.addWebMvcConfigurers(configurers);
    &#125;
  &#125;</code></pre>
<p>   }</p>
</li>
<li><p>我们可以在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p>
<pre><code>  protected void addViewControllers(ViewControllerRegistry registry) &#123;
      this.configurers.addViewControllers(registry);
   &#125;</code></pre>
</li>
<li><p>我们点进去看一下</p>
<pre><code>  public void addViewControllers(ViewControllerRegistry registry) &#123;
  Iterator var2 = this.delegates.iterator();

     while(var2.hasNext()) &#123;
      // 将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我们配置的
    WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();
   delegate.addViewControllers(registry);
      &#125;

  &#125;</code></pre>
<p>所以得出结论：所有的WebMvcConfiguration都会被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>全面接管SpringMVC</p>
</blockquote>
<p>官方文档：</p>
<p>If you want to take complete control of Spring MVC<br>you can add your own @Configuration annotated with @EnableWebMvc.<br>全面接管即：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置！</p>
<p>只需在我们的配置类中要加一个@EnableWebMvc。</p>
<p>我们看下如果我们全面接管了SpringMVC了，我们之前SpringBoot给我们配置的静态资源映射一定会无效，我们可以去测试一下；不加注解之前，访问首页：<br> <img data-src="./Springboot-mvc%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/7.png" alt="7.png"></p>
<p>给配置类加上注解：**@EnableWebMvc**<br>我们发现所有的SpringMVC自动配置都失效了！回归到了最初的样子；<br>当然，我们开发中，不推荐使用全面接管SpringMVC<br>思考问题？为什么加了一个注解，自动配置就失效了！我们看下源码：</p>
<ol>
<li><p>这里发现它是导入了一个类，我们可以继续进去看</p>
<pre><code> @Import(&#123;DelegatingWebMvcConfiguration.class&#125;)
 public @interface EnableWebMvc &#123;
 &#125;</code></pre>
</li>
<li><p>它继承了一个父类 WebMvcConfigurationSupport</p>
<pre><code> public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport &#123;
 // ......
 &#125;</code></pre>
</li>
<li><p>我们来回顾一下Webmvc自动配置类</p>
<pre><code> @Configuration(proxyBeanMethods = false)
 @ConditionalOnWebApplication(type = Type.SERVLET)
 @ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)
 // 这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效
 @ConditionalOnMissingBean(WebMvcConfigurationSupport.class)
 @AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)
 @AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,
   ValidationAutoConfiguration.class &#125;)
 public class WebMvcAutoConfiguration &#123;

 &#125;</code></pre>
<p>总结一句话：@EnableWebMvc将WebMvcConfigurationSupport组件导入进来了；</p>
</li>
</ol>
<p>而导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能！</p>
]]></content>
      <categories>
        <category>知识</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>知识</tag>
        <tag>springboot</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot-整合Mybatis</title>
    <url>/post/70e19b76.html</url>
    <content><![CDATA[<h1 id="Springboot-整合Mybatis"><a href="#Springboot-整合Mybatis" class="headerlink" title="Springboot-整合Mybatis"></a>Springboot-整合Mybatis</h1><a id="more"></a>
<p>官方文档：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>
<p>Maven仓库地址：<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.1">https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.1</a></p>
<p>整合测试</p>
<h2 id="导入-MyBatis-所需要的依赖"><a href="#导入-MyBatis-所需要的依赖" class="headerlink" title="导入 MyBatis 所需要的依赖"></a>导入 MyBatis 所需要的依赖</h2><pre><code>&lt;dependency&gt;
&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
&lt;version&gt;2.1.1&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
<h2 id="配置数据库连接信息（不变）"><a href="#配置数据库连接信息（不变）" class="headerlink" title="配置数据库连接信息（不变）"></a>配置数据库连接信息（不变）</h2><pre><code>spring:
 datasource:
username: root
password: 123456
#?serverTimezone=UTC解决时区的报错
url: jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8
driver-class-name: com.mysql.cj.jdbc.Driver
type: com.alibaba.druid.pool.DruidDataSource

#Spring Boot 默认是不注入这些属性值的，需要自己绑定
#druid 数据源专有配置
initialSize: 5
minIdle: 5
maxActive: 20
maxWait: 60000
timeBetweenEvictionRunsMillis: 60000
minEvictableIdleTimeMillis: 300000
validationQuery: SELECT 1 FROM DUAL
testWhileIdle: true
testOnBorrow: false
testOnReturn: false
poolPreparedStatements: true

#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入
#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority
#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j
filters: stat,wall,log4j
maxPoolPreparedStatementPerConnectionSize: 20
useGlobalDataSourceStat: true
connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</code></pre>
<h2 id="测试数据库是否连接成功！"><a href="#测试数据库是否连接成功！" class="headerlink" title="测试数据库是否连接成功！"></a>测试数据库是否连接成功！</h2><h2 id="创建实体类，导入-Lombok！"><a href="#创建实体类，导入-Lombok！" class="headerlink" title="创建实体类，导入 Lombok！"></a>创建实体类，导入 Lombok！</h2><pre><code>Department.java

package com.kuang.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Department &#123;

private Integer id;
private String departmentName;

&#125;</code></pre>
<h2 id="创建mapper目录以及对应的-Mapper-接口"><a href="#创建mapper目录以及对应的-Mapper-接口" class="headerlink" title="创建mapper目录以及对应的 Mapper 接口"></a>创建mapper目录以及对应的 Mapper 接口</h2><pre><code>DepartmentMapper.java

//@Mapper : 表示本类是一个 MyBatis 的 Mapper
@Mapper
@Repository
public interface DepartmentMapper &#123;

// 获取所有部门信息
List&lt;Department&gt; getDepartments();

// 通过id获得部门
Department getDepartment(Integer id);

&#125;</code></pre>
<h2 id="对应的Mapper映射文件"><a href="#对应的Mapper映射文件" class="headerlink" title="对应的Mapper映射文件"></a>对应的Mapper映射文件</h2><pre><code>DepartmentMapper.xml

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;

&lt;mapper namespace=&quot;com.kuang.mapper.DepartmentMapper&quot;&gt;

&lt;select id=&quot;getDepartments&quot; resultType=&quot;Department&quot;&gt;
   select * from department;
&lt;/select&gt;

&lt;select id=&quot;getDepartment&quot; resultType=&quot;Department&quot; parameterType=&quot;int&quot;&gt;
   select * from department where id = #&#123;id&#125;;
&lt;/select&gt;

&lt;/mapper&gt;</code></pre>
<h2 id="maven配置资源过滤问题"><a href="#maven配置资源过滤问题" class="headerlink" title="maven配置资源过滤问题"></a>maven配置资源过滤问题</h2><pre><code>&lt;resources&gt;
&lt;resource&gt;
    &lt;directory&gt;src/main/java&lt;/directory&gt;
    &lt;includes&gt;
        &lt;include&gt;**/*.xml&lt;/include&gt;
    &lt;/includes&gt;
    &lt;filtering&gt;true&lt;/filtering&gt;
&lt;/resource&gt;
&lt;/resources&gt;</code></pre>
<h2 id="编写部门的-DepartmentController-进行测试！"><a href="#编写部门的-DepartmentController-进行测试！" class="headerlink" title="编写部门的 DepartmentController 进行测试！"></a>编写部门的 DepartmentController 进行测试！</h2><pre><code>@RestController
public class DepartmentController &#123;

    @Autowired
     DepartmentMapper departmentMapper;

    // 查询全部部门
    @GetMapping(&quot;/getDepartments&quot;)
    public List&lt;Department&gt; getDepartments()&#123;
    return departmentMapper.getDepartments();
     &#125;

    // 查询全部部门
    @GetMapping(&quot;/getDepartment/&#123;id&#125;&quot;)
     public Department getDepartment(@PathVariable(&quot;id&quot;) Integer id)&#123;
          return departmentMapper.getDepartment(id);
     &#125;

    &#125;</code></pre>
<p>启动项目访问进行测试！</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>我们增加一个员工类再测试下，为之后做准备</p>
<h2 id="新建一个pojo类-Employee-；"><a href="#新建一个pojo类-Employee-；" class="headerlink" title="新建一个pojo类 Employee ；"></a>新建一个pojo类 Employee ；</h2><pre><code>@Data
@AllArgsConstructor
@NoArgsConstructor
public class Employee &#123;

private Integer id;
private String lastName;
private String email;
//1 male, 0 female
private Integer gender;
private Integer department;
private Date birth;

private Department eDepartment; // 冗余设计

&#125;</code></pre>
<h2 id="新建一个-EmployeeMapper-接口"><a href="#新建一个-EmployeeMapper-接口" class="headerlink" title="新建一个 EmployeeMapper 接口"></a>新建一个 EmployeeMapper 接口</h2><pre><code>//@Mapper : 表示本类是一个 MyBatis 的 Mapper
@Mapper
@Repository
public interface EmployeeMapper &#123;

// 获取所有员工信息
List&lt;Employee&gt; getEmployees();

// 新增一个员工
int save(Employee employee);

// 通过id获得员工信息
Employee get(Integer id);

// 通过id删除员工
int delete(Integer id);

&#125;</code></pre>
<h2 id="编写-EmployeeMapper-xml-配置文件"><a href="#编写-EmployeeMapper-xml-配置文件" class="headerlink" title="编写 EmployeeMapper.xml 配置文件"></a>编写 EmployeeMapper.xml 配置文件</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
    &lt;!DOCTYPE mapper
    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;

&lt;mapper namespace=&quot;com.kuang.mapper.EmployeeMapper&quot;&gt;

    &lt;resultMap id=&quot;EmployeeMap&quot; type=&quot;Employee&quot;&gt;
     &lt;id property=&quot;id&quot; column=&quot;eid&quot;/&gt;
     &lt;result property=&quot;lastName&quot; column=&quot;last_name&quot;/&gt;
     &lt;result property=&quot;email&quot; column=&quot;email&quot;/&gt;
     &lt;result property=&quot;gender&quot; column=&quot;gender&quot;/&gt;
     &lt;result property=&quot;birth&quot; column=&quot;birth&quot;/&gt;
     &lt;association property=&quot;eDepartment&quot;  javaType=&quot;Department&quot;&gt;
         &lt;id property=&quot;id&quot; column=&quot;did&quot;/&gt;
         &lt;result property=&quot;departmentName&quot; column=&quot;dname&quot;/&gt;
        &lt;/association&gt;
     &lt;/resultMap&gt;

 &lt;select id=&quot;getEmployees&quot; resultMap=&quot;EmployeeMap&quot;&gt;
    select e.id as eid,last_name,email,gender,birth,d.id as did,d.department_name as dname
    from department d,employee e
    where d.id = e.department
 &lt;/select&gt;

 &lt;insert id=&quot;save&quot; parameterType=&quot;Employee&quot;&gt;
    insert into employee (last_name,email,gender,department,birth)
    values (#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;department&#125;,#&#123;birth&#125;);
 &lt;/insert&gt;

 &lt;select id=&quot;get&quot; resultType=&quot;Employee&quot;&gt;
    select * from employee where id = #&#123;id&#125;
 &lt;/select&gt;

 &lt;delete id=&quot;delete&quot; parameterType=&quot;int&quot;&gt;
    delete from employee where id = #&#123;id&#125;
 &lt;/delete&gt;
&lt;/mapper&gt;</code></pre>
<h2 id="编写EmployeeController类进行测试"><a href="#编写EmployeeController类进行测试" class="headerlink" title="编写EmployeeController类进行测试"></a>编写EmployeeController类进行测试</h2><pre><code>    @RestController
    public class EmployeeController &#123;

            @Autowired
    EmployeeMapper employeeMapper;

     // 获取所有员工信息
     @GetMapping(&quot;/getEmployees&quot;)
        public List&lt;Employee&gt; getEmployees()&#123;
          return employeeMapper.getEmployees();
     &#125;

    @GetMapping(&quot;/save&quot;)
    public int save()&#123;
    Employee employee = new Employee();
    employee.setLastName(&quot;kuangshen&quot;);
    employee.setEmail(&quot;qinjiang@qq.com&quot;);
    employee.setGender(1);
    employee.setDepartment(101);
    employee.setBirth(new Date());
    return employeeMapper.save(employee);
    &#125;

     // 通过id获得员工信息
        @GetMapping(&quot;/get/&#123;id&#125;&quot;)
        public Employee get(@PathVariable(&quot;id&quot;) Integer id)&#123;
            return employeeMapper.get(id);
        &#125;

     // 通过id删除员工
      @GetMapping(&quot;/delete/&#123;id&#125;&quot;)
        public int delete(@PathVariable(&quot;id&quot;) Integer id)&#123;
          return employeeMapper.delete(id);
                &#125;

    &#125;</code></pre>
]]></content>
      <categories>
        <category>知识</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>知识</tag>
        <tag>springboot</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
</search>
